<?xml version="1.0"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. See accompanying LICENSE file.
-->


<configuration>
    <property>
        <name>yarn.log-aggregation-enable</name>
        <value>true</value>
        <description>
            Whether to enable log aggregation. Log aggregation collects each container's logs and moves these logs onto a file-system, for e.g. HDFS, after the application completes.
            Users can configure the "yarn.nodemanager.remote-app-log-dir" and "yarn.nodemanager.remote-app-log-dir-suffix" properties to determine where these logs are moved to.
            Users can access the logs via the Application Timeline Server.
        </description>
    </property>
    <property>
        <name>yarn.log.server.url</name>
        <value>http://historyserver:8188/applicationhistory/logs/</value>
        <description>URL for log aggregation server</description>
    </property>
    <property>
        <name>yarn.resourcemanager.recovery.enabled</name>
        <value>true</value>
        <description>Enable RM to recover state after starting. If true, then yarn.resourcemanager.store.class must be specified.</description>
    </property>
    <property>
        <name>yarn.resourcemanager.store.class</name>
        <value>org.apache.hadoop.yarn.server.resourcemanager.recovery.FileSystemRMStateStore</value>
        <description>
            The class to use as the persistent store. If org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore is used,
            the store is implicitly fenced; meaning a single ResourceManager is able to use the store at any point in time.
            More details on this implicit fencing, along with setting up appropriate ACLs is discussed under yarn.resourcemanager.zk-state-store.root-node.acl.
        </description>
    </property>
    <property>
        <name>resourcemanager.scheduler.class</name>
        <value>org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler</value>
        <description>The class to use as the resource scheduler.</description>
    </property>
    <property>
        <name>yarn.scheduler.maximum-allocation-mb</name>
        <value>8192</value>
        <description>
            The maximum allocation for every container request at the RM, in MBs. Memory requests higher than this will throw a InvalidResourceRequestException.
        </description>
    </property>
    <property>
        <name>yarn.scheduler.maximum-allocation-vcores</name>
        <value>4</value>
        <description>
            The maximum allocation for every container request at the RM, in terms of virtual CPU cores. Requests higher than this will throw a InvalidResourceRequestException.
        </description>
    </property>
    <property>
        <name>yarn.resourcemanager.fs.state-store.uri</name>
        <value>/rmstate</value>
        <description>
            URI pointing to the location of the FileSystem path where RM state will be stored.
            This must be supplied when using org.apache.hadoop.yarn.server.resourcemanager.recovery.FileSystemRMStateStore as the value for yarn.resourcemanager.store.class
        </description>
    </property>
    <property>
        <name>yarn.resourcemanager.system-metrics-publisher.enabled</name>
        <value>true</value>
        <description>The setting that controls whether yarn system metrics is published on the timeline server or not by RM.</description>
    </property>
    <property>
        <name>yarn.resourcemanager.hostname</name>
        <value>resourcemanager</value>
        <description>The hostname of the RM.</description>
    </property>
    <property>
        <name>yarn.resourcemanager.address</name>
        <value>resourcemanager:8032</value>
    </property>
    <property>
        <name>yarn.resourcemanager.scheduler.address</name>
        <value>resourcemanager:8030</value>
        <description>The address of the applications manager interface in the RM.</description>
    </property>
    <property>
        <name>yarn.resourcemanager.resource-tracker.address</name>
        <value>resourcemanager:8031</value>
    </property>
    <property>
        <name>yarn.timeline-service.enabled</name>
        <value>true</value>
        <description>
            In the server side it indicates whether timeline service is enabled or not.
            And in the client side, users can enable it to indicate whether client wants to use timeline service.
            If it's enabled in the client side along with security, then yarn client tries to fetch the delegation tokens for the timeline server.
        </description>
    </property>
    <property>
        <name>yarn.timeline-service.leveldb-timeline-store.path</name>
        <value>/hadoop/yarn/timeline</value>
        <description>Store file name for leveldb timeline store.</description>
    </property>
    <property>
        <name>yarn.timeline-service.generic-application-history.enabled</name>
        <value>true</value>
    </property>
    <property>
        <name>yarn.timeline-service.hostname</name>
        <value>historyserver</value>
        <description>The hostname of the timeline service web application.</description>
    </property>

    <property>
        <name>yarn.nodemanager.resource.memory-mb</name>
        <value>16384</value>
        <description>Amount of physical memory, in MB, that can be allocated for containers.</description>
    </property>
    <property>
        <name>yarn.nodemanager.resource.cpu-vcores</name>
        <value>8</value>
        <description>
            Number of vcores that can be allocated for containers. This is used by the RM scheduler when allocating resources for containers.
            This is not used to limit the number of physical cores used by YARN containers.
        </description>
    </property>
    <property>
        <name>yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage</name>
        <value>98.5</value>
        <description>
            The maximum percentage of disk space utilization allowed after which a disk is marked as bad.
            Values can range from 0.0 to 100.0. If the value is greater than or equal to 100, the nodemanager will check for full disk.
            This applies to yarn.nodemanager.local-dirs and yarn.nodemanager.log-dirs.
        </description>
    </property>
    <property>
        <name>yarn.nodemanager.remote-app-log-dir</name>
        <value>/app-logs</value>
        <description>
            The maximum percentage of disk space utilization allowed after which a disk is marked as bad.
            Values can range from 0.0 to 100.0. If the value is greater than or equal to 100, the nodemanager will check for full disk.
            This applies to yarn.nodemanager.local-dirs and yarn.nodemanager.log-dirs.
        </description>
    </property>
    <property>
        <name>yarn.nodemanager.aux-services</name>
        <value>mapreduce_shuffle</value>
    </property>
    <property>
        <name>yarn.resourcemanager.bind-host</name>
        <value>0.0.0.0</value>
        <description>A comma separated list of services where service name should only contain a-zA-Z0-9_ and can not start with numbers</description>
    </property>
    <property>
        <name>yarn.nodemanager.bind-host</name>
        <value>0.0.0.0</value>
        <description>
            The actual address the server will bind to. If this optional address is set, the RPC and webapp servers will bind to this address
            and the port specified in yarn.nodemanager.address and yarn.nodemanager.webapp.address, respectively.
            This is most useful for making NM listen to all interfaces by setting to 0.0.0.0.
        </description>
    </property>
    <property>
        <name>yarn.timeline-service.bind-host</name>
        <value>0.0.0.0</value>
        <description>
            The actual address the server will bind to. If this optional address is set, the RPC and webapp servers will bind to this address
            and the port specified in yarn.timeline-service.address and yarn.timeline-service.webapp.address, respectively.
            This is most useful for making the service listen to all interfaces by setting to 0.0.0.0.
        </description>
    </property>
</configuration>
